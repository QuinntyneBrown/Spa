import { Component } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { {{ entityNamePascalCase }}, {{ entityNamePascalCase }}Service } from '@api';
import { Destroyable } from '@core';
import { BehaviorSubject, combineLatest, of } from 'rxjs';
import { map, switchMap, takeUntil, tap } from 'rxjs/operators';


@Component({
  selector: '{{ prefix }}-{{ entityNameSnakeCasePlural }}',
  templateUrl: './{{ entityNameSnakeCasePlural }}.component.html',
  styleUrls: ['./{{ entityNameSnakeCasePlural }}.component.scss']
})
export class {{ entityNamePascalCasePlural }}Component extends Destroyable {

  private readonly _refreshSubject: BehaviorSubject<null> = new BehaviorSubject(null);

  readonly vm$ = this._refreshSubject
  .pipe(
    switchMap(_ => combineLatest([
      this._{{ entityNameCamelCase }}Service.get(),
      this._activatedRoute
      .paramMap
      .pipe(
        map(x => x.get("{{ entityNameCamelCase }}Id")),
        switchMap({{ entityNameCamelCase }}Id => {{ entityNameCamelCase }}Id ? this._{{ entityNameCamelCase }}Service.getById({ {{ entityNameCamelCase }}Id }) : of({ }))
        )
    ])),
    map(([{{ entityNameCamelCasePlural }}, selected]) => ({ {{ entityNameCamelCasePlural }}, selected }))
  );

  constructor(
    private readonly _activatedRoute: ActivatedRoute,
    private readonly _router: Router,
    private readonly _{{ entityNameCamelCase }}Service: {{ entityNamePascalCase }}Service
  ) {
    super();
  }

  public handleSelect({{ entityNameCamelCase }}: {{ entityNamePascalCase }}) {
    if({{ entityNameCamelCase }}.{{ entityNameCamelCase }}Id) {
      this._router.navigate(["/","{{ moduleSnakeCase }}","{{ entityNameSnakeCasePlural }}","edit", {{ entityNameCamelCase }}.{{ entityNameCamelCase }}Id]);
    } else {
      this._router.navigate(["/","{{ moduleSnakeCase }}","{{ entityNameSnakeCasePlural }}","create"]);
    }
  }

  public handleSave({{ entityNameCamelCase }}: {{ entityNamePascalCase }}) {
    const obs$  = {{ entityNameCamelCase }}.{{ entityNameCamelCase }}Id ? this._{{ entityNameCamelCase }}Service.update({ {{ entityNameCamelCase }} }) : this._{{ entityNameCamelCase }}Service.create({ {{ entityNameCamelCase }} });
    obs$
    .pipe(
      takeUntil(this._destroyed$),
      tap(_ => {
        this._refreshSubject.next(null);
        this._router.navigate(["/","{{ moduleSnakeCase }}","{{ entityNameSnakeCasePlural }}"]);
      }))
    .subscribe();
  }
}
